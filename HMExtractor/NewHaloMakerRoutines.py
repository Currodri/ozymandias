##################################################################################################
# HaloMakerRoutines.py contains all the required routines to interact with the outputs           #
# generated by the HaloMaker software.                                                           #
#                                                                  Author: Sergio Martin-Alvarez #
##################################################################################################

################################## Importing libraries ##########################################
import numpy as np 
import os

##################################################################################################
# The halo class used to contain the information about each galaxy/DM halo
class HaloClass:
    ############################################################### 
    def __init__(self):
        """ Initialise method """
        # General halo properties #######################
        self.haloID=-1
        self.units="Code"
        self.haloType=None
        self.halo_pos=[-1,-1,-1]
        self.halo_radius=-1
        self.halo_mass=-1
        self.halo_vel=[-1,-1,-1]
        return
    def code2physical(self,lfac,dfac,tfac):
        """ Convert halo properties from code to physical units """
        # lfac = length unit
        # dfac = density unit
        # tfac = time unit        
        if (self.units=="Code"):
            cm2kpc=3.24077929e-22
            g2Msun=5e-34
            mfac=((dfac*lfac)*lfac)*lfac
            self.halo_radius=self.halo_radius*lfac*cm2kpc # code to kpc
            self.halo_mass=self.halo_mass*mfac*g2Msun     # code to solar masses
            for ipos,xval in enumerate(self.halo_pos):
                self.halo_pos[ipos]=xval*lfac*cm2kpc      # code to kpc
            for ipos,xval in enumerate(self.halo_vel):
                self.halo_vel[ipos]=xval*(lfac/tfac)*1e-5 # code to km/s
            self.units="Physical"
        else:
            print("Current units are not code: "+self.units)
        return
        
##################################################################################################
# This function loads into python the halo parameters
def read_halos(ID,read_route,parttype,ver):
    if (ver): print( "############# Initiating HaloMakerReader #############")
    read_route=read_route+"/"
    if (len(ID)==5):ID=ID[2:]
    if (isinstance(ID,int)):
        ID=str(ID)
        while (len(ID)<5): ID="0"+ID

    # Determine required halos file
    read_file = "tree_brick_starsub_"+ID
    if (parttype == 'allparts'):
        haloM_folder = "HaloMaker_stars/AllParts/"
    elif (parttype == 'darkmatter'):
        haloM_folder = "HaloMaker_DM/DMOnly/"
        read_file = "tree_bricks"+ID
    elif (parttype == 'stars'):
        haloM_folder = "HaloMaker_stars/StarsOnly/"
    elif (parttype == 'gas'):
        haloM_folder = "HaloMaker_stars/GasOnly/"
    elif (parttype == 'gasystars'):
        haloM_folder = "HaloMaker_stars/GasStars/"
    else:
        print( "Undefined type of particles. Stars by default")
        haloM_folder = "HaloMaker/StarsOnly/"
        
    # Review whether requested file exists and whether it has been cleaned
    file_route = read_route + haloM_folder + read_file
    found_source = os.path.isfile(file_route)
    if (found_source==False):
        print("Source file not found at route:")
        print(file_route)
        return
    # Clean halo tree files if required
    AllowCleanFiles=True
    file_route = read_route + haloM_folder + "clean_" + read_file
    cleanfile = os.path.isfile(file_route)
    if (not cleanfile and AllowCleanFiles): cleanfile=auto_cleanfiles(read_route,haloM_folder)
    if (not cleanfile): file_route = read_route + haloM_folder + read_file    

    # Open file to be read
    fin = open(file_route, 'rb')
    # Reading header
    nbodies = np.fromfile(file=fin, dtype=np.int32, count=3) 
    nbodies = nbodies[1]
    realvals = np.fromfile(file=fin, dtype=np.float32 , count=12)
    massp = realvals[1]
    aexp = realvals[4]
    omega_t = realvals[7]
    age_univ = realvals[10]
    nhalos = np.fromfile(file=fin, dtype=np.int32, count=4) 
    nb_of_halos = nhalos[1]
    nb_of_subhalos = nhalos[2]
    if (ver): print( "Number of halos in output: " + str(nb_of_halos))
    if (ver): print( "Number of subhalos in output: " + str(nb_of_subhalos))
    if (ver): print( "Number of particles in output: " + str(nbodies))

    # Reading haloes:
    # If some info is not required, comment the respective line to avoid memory usage
    all_halos=[]
    nonzoom_halos=0
    ignore_nonzoom=True

    for i in range(0,nb_of_halos+nb_of_subhalos):
        new_halo=HaloClass()
        new_halo.halotype=parttype
        halo1 = np.fromfile(file=fin, dtype=np.int32, count=3) 
        new_halo.npart_halo = halo1[1]
        # Particles in halo - not stored
        if (not cleanfile):        
            ignore = np.fromfile(file=fin, dtype=np.int32, count=1)
            for j in range(0,npart_halo):
                haloparts = np.fromfile(file=fin, dtype=np.int32, count=1)
            ignore = np.fromfile(file=fin, dtype=np.int32, count=1)            
        # Halo integers
        tempR = np.fromfile(file=fin, dtype=np.int32, count=3)
        new_halo.haloID=tempR[1]
        tempR = np.fromfile(file=fin, dtype=np.int32, count=3)
        new_halo.halo_tstep=tempR[1]
        tempR = np.fromfile(file=fin, dtype=np.int32, count=7)
        new_halo.halo_level=tempR[1]
        new_halo.halo_host=tempR[2]
        new_halo.halo_hostsub=tempR[3]
        new_halo.halo_nsub=tempR[4]
        new_halo.halo_nextsub=tempR[5]
        # Halo m        
        tempR = np.fromfile(file=fin, dtype=np.float32, count=3)
        # Halo positions
        ignore = np.fromfile(file=fin, dtype=np.int32, count=1)
        tempR = np.fromfile(file=fin, dtype=np.float64, count=3)
        ignore = np.fromfile(file=fin, dtype=np.int32, count=1)
        new_halo.halo_pos=[tempR[0]+0.5,tempR[1]+0.5,tempR[2]+0.5]
        # Halo velocities
        ignore = np.fromfile(file=fin, dtype=np.int32, count=1)
        tempR = np.fromfile(file=fin, dtype=np.float64, count=3)
        ignore = np.fromfile(file=fin, dtype=np.int32, count=1)
        new_halo.halo_vel=[tempR[0],tempR[1],tempR[2]]
        # Halo angular momenta
        ignore = np.fromfile(file=fin, dtype=np.int32, count=1)
        tempR = np.fromfile(file=fin, dtype=np.float64, count=3)
        ignore = np.fromfile(file=fin, dtype=np.int32, count=1)
        new_halo.halo_Lmom=[tempR[0],tempR[1],tempR[2]]
        # Halo radius + a,b,c
        tempR = np.fromfile(file=fin, dtype=np.float32, count=6)
        new_halo.halo_radius=tempR[1]
        new_halo.halo_shape=[tempR[2],tempR[3],tempR[4]]
        # Halo Kinetic,Potential,Thermal
        tempR = np.fromfile(file=fin, dtype=np.float32, count=5)
        new_halo.halo_energies=[tempR[1],tempR[2],tempR[3]]
        # Halo Spin
        tempR = np.fromfile(file=fin, dtype=np.float32, count=3)
        new_halo.halo_spin=tempR[1]
        # Halo virials [radius, mass, temperature]
        tempR = np.fromfile(file=fin, dtype=np.float32, count=6)
        new_halo.halo_radius=tempR[1]
        new_halo.halo_mass=tempR[2]
        new_halo.halo_temp=tempR[3]
        new_halo.halo_cvel=tempR[4]
        # Halo profiles
        tempR = np.fromfile(file=fin, dtype=np.float32, count=4)
        new_halo.halo_rho0=tempR[1]
        new_halo.halo_r_c=tempR[2]

        # Ignore haloes out of zoom
        add_halo=True
        if (ignore_nonzoom):
            xzoom=[0.68,0.33,0.29]
            rzoom=(0.34*0.5)**2
            rhalo=0
            for idim in range(3):
                rhalo=rhalo+(new_halo.halo_pos[idim]-xzoom[idim])**2
                if (rhalo>rzoom):
                    add_halo=False
                    nonzoom_halos=nonzoom_halos+1
                    break
        if (add_halo): all_halos.append(new_halo)
        
    halo1 = np.fromfile(file=fin, dtype=np.int32, count=3) 

    if(nonzoom_halos>0): print("Halos out of zoom region: "+str(nonzoom_halos))
    if(ver): print( "Finished HaloMakerReader")
    if(ver): print( "#######################################################")
    return all_halos    
######################################################################################
######################################################################################
######################################################################################
######################################################################################
# This function installs and automatically cleans halo files for more rapid execution
def auto_cleanfiles(read_route,haloM_folder):
    HalosExtractorRoute="~/bin"
    # host_machine=machine_name()
    cleanfile=False
    if (os.path.isfile(HalosExtractorRoute+"HalosExtractor.out")):        
        print("I am trying to clean the halos in the received folder to accelerate")
        print("execution. This is done once per simulation and really worth not   ")
        print("having to read the particles")
        os.system(str(HalosExtractorRoute)+"./HalosExtractor.out "+str(read_route+haloM_folder))
        cleanfile=True
    else:
        print("I have tried to clean your halo files for faster execution but")
        print("I could not find HalosExtractor.out. Consider installing this")
        print("for faster execution")
    return cleanfile
######################################################################################
######################################################################################
######################################################################################
######################################################################################
